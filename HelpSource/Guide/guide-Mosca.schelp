title::Guide to Mosca
summary::Usagae exemples for Mosca
categories::Libraries>Ambisonic Toolkit, Libraries>HOA
related::Classes/Mosca

A video tutorial of Mosca is available here: http://escuta.org/moscavideo

Please ensure that SuperCollider is installed with plugins
from: https://github.com/supercollider/sc3-plugins
It is also necessary to install the ATK
Kernels: http://www.ambisonictoolkit.net/download/kernels

The user must set up a project directory with subdirectories "rir" and "auto". RIRs
should have the first 100 or 120ms silenced to act as "tail" reverberator and must be
placed in the "rir" directory. For convenience, please download the "moscaproject.zip"
file on the following page which contains the file structure, example RIRs and B-format
recordings as well as other information and demos. Note that the example RIR is recorded
at 48kHz:

http://escuta.org/mosca

Please then see the methods and code examples below.

Once you have successfully opened the GUI, read this:

NOTES ON GUI COMPONENTS

- Source pull down menu. Select a source

- Doppler. The user must also use the "Doppler Amount" slider to adjust the effect

- Loop. Loop sounds loaded from file

- A-format reverb. By default the system uses the more efficient Chowning-style reverb
described above. This toggle applies a second order diffuse 2nd order reverberation to
mono and stereo sources as well as "contracted" B-format material (see below). Note that
the reverberation applied to B-format signals is always via A-format transformation.

- HW-in. Toggle this to read audio from hardware inputs. The user must specify the
number of channels and the staring bus (starting with zero) in the two fields beneath
the toggle. Note this will override any loaded sound file. It is up to the user to
manage the start busses for the various source. If for example source 1 is a 4 channel
signal and starts on bus zero, a second stereo source myst use a starting bus of 4 or
higher.

- SC-in. Get audio in from a SuperCollider synth. The user needs to specify the number
of channels in the GUI but does not need to specify the starting bus. See code examples
below for more information. Like HW-in, selecting SC-in for a particular source will
disable any sound file that has been loaded.

- Linear Intensity. Select this to apply linear attenuation of itensity with distance.
By default, intensity is adjusted in proportion to the invesrse square root of
proximity.

- load audio. Load a sound file for a given a source.

- show data. Open and close a data window for all sources showing all parameters.

- show nodes. Show SuperCollider node tree.

- show aux. Open and close an auxiliary controller window for a source. These sliders
do not affect spatialisation of the source, however the data produced is sent to any
"registered" SuperCollider synth is recorded and reproduced by the GUI's transport.
See the code examples for more information.

- audition. Use this button to audition a given source. Note that the transport also
plays and cues sounds, "audition" should only be used to test sounds with the interface.

- record audio. Records audio as a wav file to the project directory defined by the
"projDir" class method. The number of channels recorded and the starting bus are defined
by the "recchans" and "recbus" class methods respectively (see below).

- blips. Check this box to include audible blips at the begining of the recording.
This may be useful when post synchronising the recorded audio with footage taken on a
video camera.

- Level. Adjust playback level of source.

- Doppler amount. See b) above.

- Close Reverb. Adjust level of reverberation for proximal sources.

- Distant Reverb. Adjust level of reverberation for distant sources.

- Angle. Adjust angle of virtual speaker pair for stereo sources.
The default is 1.05 radians or 60 degrees.

- Rotate. Rotate a B-format signal on the horizontal plane.

- Directivity. Adjust the directivity of B-format signal (see ATK documentation)

- Contraction. In the case of B-format input, contraction is a cross-fade between
B-format signal an its W component. Note that the "contracted" signal is spatialised
with 2nd order ambisonics when using an external decoder. When the user is decoding
with a 1st order decoder from the ATK, mono and stereo signals are encoded as
omnidirectional B-format signals and angled in space using the ATK's "push"
transformation. In this this case contraction varies between an omnidirectional signal
and a spatially focussed signal.

- Spread / Diffuse. As mentioned above, when using a 1st order decoder, mono and stereo
signals are signals are encoded as omni B-format signals before being "pushed" into an
angular location (if fully "contracted"). The Spread and Diffuse toggles allow the user
to select two other methods to diffuse the signal omni-directionally. See "spread
diffusion encoder" and "frequency spreading encoder" here: http://doc.sccode.org
/Classes/FoaEncode.html

- Z-axis. Manipulate the Z-axis of current source.

- Automation transport. Includes a "play/stop" button, a return to start button,
a record button and a "snapshot" button of current values button. The Automation
transport also contains a slider to move the "play head". Loaded sounds which are not
looped will start at the beginning of the file at "0" on the transport and the transport
fader may be used to advance through these sounds as well as advance through the
recorded fader settings.

- save auto / load auto. Save/load to/from a chosen directory.

- Slave to MMC. Slave the transport to incoming Midi Machine Control data.
This has been tested with Ardour and Jack on Linux.

- Loop. Loop the transport.

- Orientation (when used with Arduino 9-axes Motion Shield headtracking device
(see below). The values are for heading, roll and pitch and are in degrees radians.

code::
/*
Make sure the server is stopped before running this block of example code for first time

OPEN THE MOSCA GUI (edit to suit your situation)
*/

(
s = Server.local;
s.quit;
o = s.options;
//o.numAudioBusChannels = 2048;
o.numInputBusChannels = 32;
o.numOutputBusChannels = 15;
// eg. 2 for stereo, 4 for 1st order ambisonics & 9 for 2nd order
o.memSize = 64 * 8192;
o.numAudioBusChannels = 2048;
o.numWireBufs = 512;
s.waitForBoot {

// Add a SC internal decoder (1st order only)
// See the ATK docs for more info: http://doc.sccode.org/Classes/FoaDecode.html
//~decoder = FoaDecoderKernel.newUHJ;
s.sync;
~decoder = FoaDecoderKernel.newCIPIC(21); // Binaural
//5.wait;
s.sync;

MIDIIn.connect(inport: 0, device: 0);  // must connect to MIDI for MMC synch
s.sync;

/*Create a project directory and in it create to more directories "rir" and "auto".
Place your ambisonic rirs in the rir folder. For some demo rirs and ambisonic recordings
see the zip archive here: http://escuta.org/mosca

Create Mosca instance with arguments (projDir, nsources: 1, width: 800, dur: 180,
rir:"allpass", server, decoder). If <decoder> is left blank, Mosca will send 2nd order
and 1st order signals out of SC's outputs for decoding with an external decoder. */

// Use FreeVerb filter reverberation

~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 11, width: 965,
dur: 60, rir: "FreeVerb", freeroom: 0.5, freedamp: 0.5, decoder: ~decoder);

// without headtracking with rir supplied in the zip file mentioned above.

//~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 12, width:
//965, dur: 60, rir: "QL14Tail2Sec.amb", decoder: ~decoder);
::

section::Serial devices & head tracking

The Arduino and 9-Axes Motion Shield and supporting Arduino board such as the Uno
(tested) should be placed on top of the headphones with the USB socket of the Arduino
directed to the left of the user. In this orientation the USB cable can run down
left-hand side of headphones together with audio lead. Use the Arduino project files in
the directory "arduinoHeadTrack" in the git sources to configure the Arduino and shield.
See https://www.arduino.cc for more information on the Arduino.

When using Mosca with a head-tracker, it is useful to access the serial device with a
persistant name. To do this on Debian/Ubuntu Linux, first get information about an
attached device with a line such as:

udevadm info -a -p  $(udevadm info -q path -n /dev/ttyACM0)

Search for the block of data that contains reference to the Arduino and take note of the
values for idVendor and idProduct. Then create a file /etc/udev/rules.d/10-local.rules
and add contents such as the following (edit this line and above to your needs):

ACTION=="add", ATTRS{idVendor}=="2341", ATTRS{idProduct}=="0043", MODE:="0666",
SYMLINK+="head_tracker"

To load this without rebooting, type: sudo udevadm control --reload-rules

Then disconnect and reconnect your device. In the above example it can be accessed at
/dev/head_tracker for example.

code::
// with headtracking (used with binaural decoder)

//~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 12, width:
//865, dur: 60, rir: "QL14Tail2Sec.amb", decoder: ~decoder, serport: "/dev/
//head_tracker", offsetheading: -2.6, recchans: 2, recbus: 0);



// Use RIR and send raw 1st order ambi sginal to outputs (channels 2-10)
//using no decoder, a raworder of 1 and rawbus value of 2.

//~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 12, width:
//995, dur: 60, rir: "QL14Tail2Sec.amb", rawbusfoa: 2, rawbussoa: 6, raworder: 2);


s.sync;


// use the following to experiment with heading adjustments
//~testMosca.offsetHeading(0.38);
};

)

// If you close the Mosca window, don't forget to free the decoder afterwards

(
~decoder.free;
MIDIIn.disconnect(inport: 0, device: 0);
)


/*
USING SUPERCOLLIDER SYNTHS AS INPUT

Must have SC-in selected on GUI for particular source and the number of channels entered
(either 1, 2 or 4).

In this example, two sources are dedicated in the GUI. Source 1 and 2 each with 1
channel (in "No. of Channels) and select "SC-in" for both sources.

Write a synthdef. Note that you must specify an out bus in the arguments as well as any
GUI data that you wish to use (in this example mx and my). For a full list of GUI data
available run: */

Mosca.printSynthParams

(
SynthDef("test-out", { arg outbus=0, freq=440, mx, my;
	var source, source2, point, freqAdjust, delEnv, dis;
        var mod;
	point = Point.new;
	point.set(mx, my);
	dis = point.rho;
//	mod = SinOsc.kr(5 + (dis * 4), 0, 0.4);
mod = 0;
	dis = Lag.kr(dis, 0.1);

	freqAdjust = dis * 1;
	delEnv = Env.dadsr(0.2, attackTime: 0.1, decayTime: inf,
	sustainLevel: 0.9); // envelope with an onset delay equal to lag buffer
	source = Pulse.ar(freq + freqAdjust, width: dis, mul: EnvGen.kr(delEnv,
				doneAction: 2) + mod);
	Out.ar(outbus, source);
// or try stereo with 2 channels set in gui
//	source2 = Pulse.ar(freq + 3 + freqAdjust, width: dis, mul: EnvGen.kr(delEnv,
//			doneAction: 2) + mod);
//	Out.ar(outbus, [source, source2]);

}).send(s);
)

/*
Set up first source

The user must create a "Trigger function" that contains synths. This function will be
called when "audition" a particular source or when the transport's play button is
selected in the GUI. The user must use the getSCBus method to set the bus number for the
particular source (sources numbered from 1 on) as well as "onFree" of the Synth class to
deregister the synth (with the method deregisterSynth). The method registerSynth is used
to register it.

These simple sounds work best with some doppler set in GUI and some reverb.
*/

(
~source1PlayFunc = {
~mySynth = Synth.new("test-out", [\freq, 220, \outbus,
~testMosca.getSCBus(1)]).onFree({"done".postln; ~testMosca.deregisterSynth(1,
~mySynth)});

~testMosca.registerSynth(1, ~mySynth);
};
~source1StopFunc = {~mySynth.free; };
~testMosca.setTriggerFunc(1, ~source1PlayFunc);
~testMosca.setStopFunc(1, ~source1StopFunc);
)

// second source
(
~source2PlayFunc = {
~myOtherSynth = Synth.new("test-out", [\freq, 550, \outbus,
~testMosca.getSCBus(2)]).onFree({"done".postln; ~testMosca.deregisterSynth(2,
~myOtherSynth)});

~testMosca.registerSynth(2, ~myOtherSynth);
};
~source2StopFunc = {~myOtherSynth.free; };

~testMosca.setTriggerFunc(2, ~source2PlayFunc);
~testMosca.setStopFunc(2, ~source2StopFunc);
)


/* MAKE AN EFFECTS INSERT
In the GUI, play something in source #1. Filter it with a synth. Note that the source
and the filter may be launched in either order.

Note - presently in development
*/


SynthDef(\Echo, {|aformatIn, aformatOut|
	var sig, delayTime = 0.6;
        sig = In.ar(aformatOut, 4);
	delayTime = 0.6;
        sig = CombC.ar(sig*0.5, 2, delayTime, 6) + sig;
	Out.ar(aformatIn, sig)
}).add;

y = Synth(\Echo, [\aformatIn, ~testMosca.getFoaInsertIn(1), \aformatOut,
~testMosca.getFoaInsertOut(1)], addAction: \addToTail);

y.free; // free the filter

~testMosca.releaseInsert(1) // return to sound with no filter

// If you have an external decoder, try this with a 2nd order mono source (will use 12-
// channel A-format)

SynthDef(\Filter, {|aformatIn, aformatOut|
	var sig = In.ar(aformatOut, 12);
	sig = RLPF.ar(sig, FSinOsc.kr( 0.2, 0, 3600, 4000), 0.9);
	Out.ar(aformatIn, sig)
}).add;
z = Synth(\Filter, [\aformatIn, ~testMosca.getSoaInsertIn(1), \aformatOut,
		~testMosca.getSoaInsertOut(1)], addAction: \addToTail);

z.free; // free the filter
~testMosca.releaseInsert(1) // return to sound with no filter

::

section::Coded Mosca

The GUI does not control internal variables directly, but rather via proxies of the
class AutomationGuiProxy. This enables Mosca to run with or without a GUI as it is
the proxies that save and read Automation data to and from disk and not the GUI elements
themselves. Ordinarily the user does not need to know about this technical detail,
however the proxies serve another useful purpose, they can be used for coded control
of Mosca, with or without an active GUI. Proxies objects behave like GUI elements in
that they have a value and an assigned function that when called upon, acts on that
variable. So for example, if we wish to get the current x-position for a particular
source we may use: myMoscaInstanceName.xboxProxy[i].value, where i is the number of the
source with the index starting at zero. We may use the method valueAction to set the
value of a proxy and have its value propagated through the system. So for example, if we
wish to change the position of the x-coordenate for source 2 to 0.5, we use:
myMoscaInstanceName.xboxProxy[1].valueAction = 0.5. The following is a list of available
proxies:

xboxProxy - x-coord (-1 - 1)

yboxProxy - y-coord (-1 - 1)

zboxProxy - z-coord (-1 - 1)

dcheckProxy - Doppler checkbox (flag))

lpcheckProxy - loop checkbox (flag)

rvcheckProxy - A-format reverb checkbox (flag)

hwncheckProxy - Hardware-in checkbox (flag)

scncheckProxy - SuperCollider-in checkbox (flag)

lncheckProxy - linear intensity (flag)

ncanboxProxy - number of channels (1,2 or 4)

businiboxProxy - start bus (0 - n)

vboxProxy - level (0 - 1)

dpboxProxy - Doppler amount (0 - 1)

gboxProxy - close reverb (0 -1)

lboxProxy - distant reverb (0 -1)

cboxProxy - contraction (0 -1)

spcheckProxy - spread checkbox (flag)

dfcheckProxy - diffuse checkbox (flag)

aboxProxy - angle (0 - 3.14rad)

rboxProxy - rotation (-3.14 - 3.14rad)

dboxProxy - Directivity angle (0 - 1.57rad)

a1checkProxy - auxiliary 1 button (flag)

a2checkProxy - auxiliary 2 button (flag)

a3checkProxy - auxiliary 3 button (flag)

a4checkProxy - auxiliary 4 button (flag)

a5checkProxy - auxiliary 5 button (flag)

a1boxProxy - auxiliary 1 level (0-1)

a2boxProxy - auxiliary 2 level (0-1)

a3boxProxy - auxiliary 3 level (0-1)

a4boxProxy - auxiliary 4 level (0-1)

a5boxProxy - auxiliary 5 level (0-1)

stcheckProxy - stream check (data window) (flag)

tfieldProxy - file path (data window) (path)

code::
// CODED CONTROL OF MOSCA

As described above in this help file (see "CODED CONTROL OF MOSCA" in Description),
Mosca may be controlled via proxies. To use the following block of code, have the Mosca
GUI running with a sound loaded in source 1 and with "audition" selcted and the "level"
turned up. Run the block of code below to control the x, y and z coordinates. You may
also use this form of control in non-GUI mode (see below).

(
// orbit derived from code by WillS: http://cplussplussatplay.blogspot.com.br/2011/09/
// simple-2d-orbit.html

// "constants"
var grav_const = 6.6742e-11;
var earth_mass = 5.975e24;
// variables
var radius = 6.37814e6;
var angle = 0;
var grav_accel = 0;
var body_pos_x = 1.4e6; // An X axis position of the body to be attracted
var body_pos_y = 7.5e5; // A Y axis position of the body to be attracted
var body_vel_x = 0.0;   // Body velocity split into two components, X and Y
var body_vel_y = 8.5e3;
var scale = 10000 * 250;
~orbit = t             // set ~orbit to false to turn orbit off (see after end of block)

Routine {
	while ( {~orbit}, {
		radius = (pow(body_pos_x, 2) + pow(body_pos_y, 2)).sqrt;
		grav_accel = (grav_const * (earth_mass / pow(radius, 2)));
		angle = atan2(body_pos_x, body_pos_y);
		body_vel_x = body_vel_x + (sin(angle) * grav_accel);
		body_vel_y = body_vel_y + (cos(angle) * grav_accel);
		body_pos_x = body_pos_x - body_vel_x;
		body_pos_y = body_pos_y - body_vel_y;
		// Control x,y and z values for source 1
		~testMosca.xboxProxy[0].valueAction = (body_pos_x / scale);
		~testMosca.yboxProxy[0].valueAction = (body_pos_y / scale);
		~testMosca.zboxProxy[0].valueAction = (body_pos_y / scale);
				// duplicate Y for Z-axis
		0.02.wait;
	};
	);
}.play;

)

~orbit = false    // turn off orbit


// RUNNING MOSCA WITHOUT A GUI

1. As a first step, run the first block of code above in these Examples
	to open a Mosca GUI.
2. Record some Automation data and save to disk, taking note of the address.
3. Edit the block of code below to include the correct paths for your saved
	Automation file.
4. Run the code and use the commands below the block to control playback.

(
s = Server.local;
s.quit;
o = s.options;
//o.numAudioBusChannels = 2048;
o.numInputBusChannels = 32;
o.numOutputBusChannels = 15;
// eg. 2 for stereo, 4 for 1st order ambisonics & 9 for 2nd order
o.memSize = 64 * 8192;
o.numAudioBusChannels = 2048;
o.numWireBufs = 512;
s.waitForBoot {

// Add a SC internal decoder (1st order only)
// See the ATK docs for more info: http://doc.sccode.org/Classes/FoaDecode.html
//~decoder = FoaDecoderKernel.newUHJ;
s.sync;
~decoder = FoaDecoderKernel.newCIPIC(21); // Binaural
s.sync;

MIDIIn.connect(inport: 0, device: 0);
s.sync;

// without headtracking with rir supplied in the zip file mentioned above.

~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 12, width: 865,
dur: 60, rir: "QL14Tail2Sec.amb", decoder: ~decoder, guiflag: false);


// with headtracking (should only be used with binaural decoder)

/*
~testMosca = Mosca.new(projDir: "/path/to/your/moscaproject", nsources: 12, width: 865,
dur: 60, rir: "QL14Tail2Sec.amb", decoder: ~decoder, serport: "/dev/head_tracker",
offsetheading: -2.6, recchans: 2, recbus: 0, guiflag: false);
*/

	~testMosca.control.load("/path/to/your/automation/file");
	~testMosca.loadNonAutomationData("/path/to/your/automation/file");
};

)

~testMosca.blindControlPlay    // play Automation
~testMosca.blindControlStop    // stop Automation
~testMosca.control.seek(5.0) // jump to the 5 second mark

// Use this block to free a no-gui Mosca instance when finished
(
~testMosca.free;
~decoder.free;
MIDIIn.disconnect(inport: 0, device: 0);
)

::