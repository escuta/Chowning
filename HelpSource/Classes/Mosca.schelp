TITLE:: Mosca
summary:: GUI-assisted production of ambisonic and binaural sound fields with simulated moving or stationary sound sources
categories:: Undocumented classes
related:: Classes/SomeRelatedClass, http://www.ambisonictoolkit.net

DESCRIPTION::
Mosca is a SuperCollider class for the creation of sound fields and the simulation of moving sound sources using either ambisonic or binaural spatialisation. It uses John Chowning's technique of applying "local" and "global" reverberation to sources in order to simulate distance cues,1 as well as simulating other phenomena such as the Doppler effect and high frequency attenuation with distance. The program has a GUI and sound sources are read from file, from hardware inputs or from other applications via Jack. It also supports basic synchronisation with audio edited in a DAW. Sound sources to be spatialised by ambisonic or binaural means may be mono, stereo or four-channel B-format in origin. The interface facilitates the 3D spatialisation of multiple sources and their positions and movements may be recorded for synchronised playback. While the audio output of the binaural mode requires no further processing, ambisonic signals must be decoded with an appropriate ambisonic decoder such as Ambdec via Jack on Linux platforms.

The program makes use of the Ambisonic Toolkit (ATK) for SuperCollider by Joseph Anderson and the Automation quark. It also uses B-format impulse responses (IRs) from the OpenAir project binaural IRs from the Salford-BBC Spatially-sampled Binaural Room Impulse Responses. The IRs have been modified here, having had the early reflections removed, to serve as "tail" IRs for use in reverberation.

USING MOSCA

To use mosca, create a specific project directory. Within this include two further directories named "rir" and "auto". The rir directory must contain at least one b-format rir and one binaural rir. The auto directory is empty until you begin to save automation data from the Mosca GUI. For convenience, please download the "moscaproject.zip" file on the following page which contains the file structure, example RIRs and B-format recordings as well as other information and demos: http://escuta.org/mosca

See the code examples below for further information. The example assumes the download of moscaproject.zip. You will need to change the path to match the location of your porject file. If using these files, please run your system at 48kHz.


CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: rirWXYZ
B-Format ambisonic room impulse response. Ensure that it has the same sample rate as your system.

ARGUMENT:: rirBinaural
Binaural room impulse response. Ensure that it has the same sample rate as your system.

ARGUMENT:: subjectID
Subject ID for the Binaural decoder, which uses th CIPIC Databse. Information from the ATK: http://doc.sccode.org/Classes/FoaDecoderKernel.html :
"3 to 165 (45 in total) ... WARNING: subjectIDs are not entirely contiguous ... The CIPIC HRTF database provides two KEMAR dummy measurements. subjectID = 21 is the large pinnae dummy and subjectID = 165 is the small pinnae dummy." Note. The ATK plugins for the DAW "Reaper", show actual photographas of the subjects, see: http://www.ambisonictoolkit.net

ARGUMENT:: srvr
Server used. eg. Server.default

returns:: (describe returnvalue here)


INSTANCEMETHODS::

METHOD:: openGui
Creates GUI window

ARGUMENT:: nfontes
The number of sound sources to be spatialised. Sound sources may be mono, stereo or B-format.

ARGUMENT:: dur
Duration in seconds of the "Automation" transport.

returns:: (describe returnvalue here)



EXAMPLES::

code::

(
	s.waitForBoot {
		~testMosca = Mosca.new("/path/to/your/moscaproject",
			"QL14_tail48kHz.amb", "sbs_binaural_tail.wav", 21, Server.local);
	};
)

~testMosca.openGui(6, 120);
::
